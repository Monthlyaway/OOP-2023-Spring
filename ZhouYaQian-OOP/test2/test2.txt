1. 编写C++函数split，将句子分割成单词（单词以一个或多个空白符隔开）。例如将“I am  from Shanghai.”分割成四个单词：“I”, “am”, "from", "Shanghai."
函数原型：
std::vector<string> split(const std::string & s);


2. 编写C++函数frame，将一行一个输出存储在vector<string>类型向量中的所有字符串，并用一个边框来围住这些字符串。将沿着左边框把这些字符串排列起来并在星号图和我们输出的单词之间留一个空格。
函数原型：
std::vector<string> frame(const std::vector<string> & v);

3. 逆波兰表达式是一种把运算符前置的算术表达式，例如普通的表达式2+3的逆波兰表达法为 2 3 ＋。逆波兰表达式的优点是运算符之间不必有优先级关系，也不必用括号改变运算词序，例如（2＋3)*4的逆波兰表达法为 4 3 2 ＋ ＊。本题求解逆波兰表达式的值，其中运算符包括＋、－、＊、／。

逆波兰表达式的优势在于只用两种简单操作，入栈和出栈就可以搞定任何普通表达式的运算。其运算方式如下：
如果当前字符为变量或者为数字，则压栈，如果是运算符，则将栈顶两个元素弹出作相应运算，结果再入栈，最后当表达式扫描完后，栈里的就是结果。

提示：
1) 把表达式读入元素为string的vector中，从vector尾部开始处理，可以用递归。
2) 可能会用到的部分库函数：
vector.push_back(str)
vector.pop_back()
vector.size()
vector[i]
vector.front()
vector.back()
string.front()
string.back()

例如：
输入
35.0 24.0 + 12.0 11.0 ＋ *

输出
1357


请在附件中的.cpp和.h文件的//TODO后添加代码，使程序完整。test2_output.txt为test2_input.txt为测试输入时的输出。请同学们使用这些测试数据来验证自己的程序。

请把所有的.cpp和.h文件打包提交。
